<?xml version="1.0" encoding="UTF-8"?>
<operation id="08ca053b-24e5-4cb4-b155-db2ab3086a8a">
  <descriptionCdata><![CDATA[]]></descriptionCdata>
  <annotation></annotation>
  <name>Parse CSA Properties</name>
  <categories/>
  <inputs>
    <staticBinding id="15167567-d79f-47b8-882e-9e3c0707bd55">
      <annotation></annotation>
      <assignFromContext>true</assignFromContext>
      <assignToContext>true</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>jsonObject</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <value></value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="2ec76a8d-03a4-4629-98a3-8bd67d209016">
      <annotation></annotation>
      <assignFromContext>true</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>checkKeyAndValue</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <value>false</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="600a83e1-f353-4254-ac43-536c232fee32">
      <annotation></annotation>
      <assignFromContext>true</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>global</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <value>true</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="064e39a8-1818-4fc3-84ef-ffe30deaacb7">
      <annotation></annotation>
      <assignFromContext>true</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>prefix</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <value></value>
      <record>false</record>
    </staticBinding>
  </inputs>
  <scriptlet id="6ade9f29-b80b-4377-8f91-747f8e9005bc">
    <annotation></annotation>
    <name>Operation Parse CSA Properties (08ca053b-24e5-4cb4-b155-db2ab3086a8a)</name>
    <script>// One-liner to define JSON parser and stringifier.  Minified version of http://www.json.org/json2.js

//if(!this.JSON){this.JSON={};}(function(){function f(n){return n&lt;10?&apos;0&apos;+n:n;} if(typeof Date.prototype.toJSON!==&apos;function&apos;){Date.prototype.toJSON=function(key){return isFinite(this.valueOf())?this.getUTCFullYear()+&apos;-&apos;+ f(this.getUTCMonth()+1)+&apos;-&apos;+f(this.getUTCDate())+&apos;T&apos;+f(this.getUTCHours())+&apos;:&apos;+f(this.getUTCMinutes())+&apos;:&apos;+f(this.getUTCSeconds())+&apos;Z&apos;:null;};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf();};} var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\&quot;\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={&apos;\b&apos;:&apos;\\b&apos;,&apos;\t&apos;:&apos;\\t&apos;,&apos;\n&apos;:&apos;\\n&apos;,&apos;\f&apos;:&apos;\\f&apos;,&apos;\r&apos;:&apos;\\r&apos;,&apos;&quot;&apos;:&apos;\\&quot;&apos;,&apos;\\&apos;:&apos;\\\\&apos;},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?&apos;&quot;&apos;+string.replace(escapable,function(a){var c=meta[a];return typeof c===&apos;string&apos;?c:&apos;\\u&apos;+(&apos;0000&apos;+a.charCodeAt(0).toString(16)).slice(-4);})+&apos;&quot;&apos;:&apos;&quot;&apos;+string+&apos;&quot;&apos;;} function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&amp;&amp;typeof value===&apos;object&apos;&amp;&amp;typeof value.toJSON===&apos;function&apos;){value=value.toJSON(key);}if(typeof rep===&apos;function&apos;){value=rep.call(holder,key,value);} switch(typeof value){case&apos;string&apos;:return quote(value);case&apos;number&apos;:return isFinite(value)?String(value):&apos;null&apos;;case&apos;boolean&apos;:case&apos;null&apos;:return String(value);case&apos;object&apos;:if(!value){return&apos;null&apos;;}gap+=indent;partial=[];if(Object.prototype.toString.apply(value)===&apos;[object Array]&apos;){length=value.length;for(i=0;i&lt;length;i+=1){partial[i]=str(i,value)||&apos;null&apos;;} v=partial.length===0?&apos;[]&apos;:gap?&apos;[\n&apos;+gap+partial.join(&apos;,\n&apos;+gap)+&apos;\n&apos;+mind+&apos;]&apos;:&apos;[&apos;+partial.join(&apos;,&apos;)+&apos;]&apos;;gap=mind;return v;}if(rep&amp;&amp;typeof rep===&apos;object&apos;){length=rep.length;for(i=0;i&lt;length;i+=1){k=rep[i];if(typeof k===&apos;string&apos;){v=str(k,value);if(v){partial.push(quote(k)+(gap?&apos;: &apos;:&apos;:&apos;)+v);}}}}else{for(k in value){if(Object.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?&apos;: &apos;:&apos;:&apos;)+v);}}}} v=partial.length===0?&apos;{}&apos;:gap?&apos;{\n&apos;+gap+partial.join(&apos;,\n&apos;+gap)+&apos;\n&apos;+ mind+&apos;}&apos;:&apos;{&apos;+partial.join(&apos;,&apos;)+&apos;}&apos;;gap=mind;return v;}} if(typeof JSON.stringify!==&apos;function&apos;){JSON.stringify=function(value,replacer,space){var i;gap=&apos;&apos;;indent=&apos;&apos;;if(typeof space===&apos;number&apos;){for(i=0;i&lt;space;i+=1){indent+=&apos; &apos;;}}else if(typeof space===&apos;string&apos;){indent=space;} rep=replacer;if(replacer&amp;&amp;typeof replacer!==&apos;function&apos;&amp;&amp;(typeof replacer!==&apos;object&apos;||typeof replacer.length!==&apos;number&apos;)){throw new Error(&apos;JSON.stringify&apos;);} return str(&apos;&apos;,{&apos;&apos;:value});};} if(typeof JSON.parse!==&apos;function&apos;){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&amp;&amp;typeof value===&apos;object&apos;){for(k in value){if(Object.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v;}else{delete value[k];}}}} return reviver.call(holder,key,value);} text=String(text);cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return&apos;\\u&apos;+ (&apos;0000&apos;+a.charCodeAt(0).toString(16)).slice(-4);});} if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:[&quot;\\\/bfnrt]|u[0-9a-fA-F]{4})/g,&apos;@&apos;).replace(/&quot;[^&quot;\\\n\r]*&quot;|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,&apos;]&apos;).replace(/(?:^|:|,)(?:\s*\[)+/g,&apos;&apos;))){j=eval(&apos;(&apos;+text+&apos;)&apos;);return typeof reviver===&apos;function&apos;?walk({&apos;&apos;:j},&apos;&apos;):j;} throw new SyntaxError(&apos;JSON.parse&apos;);};}}());
eval(String(scriptletContext.get(&quot;nucl.base.oojs&quot;))); /* #include this line in scriptlet to use OO ScriptLet Common Define functions for OOJS V1.0 @Daway*/

function filterProperties(csaProperties, propFilter, isChecked) {
	if (propFilter == &quot;&quot;)
		return csaProperties;
	var props = [];
	for (var i = 0; i &lt; propFilter.length; i++) {
		var foundProp = null;
		for (var j = 0; j &lt; csaProperties.length; j++) {
			if (propFilter[i] == csaProperties[j].name) {
				foundProp = csaProperties[j];
				break;
			}
		}
		if (isChecked == &quot;TRUE&quot; &amp;&amp; foundProp == null)
			throw &quot;Property &quot; + propFilter[i] + &quot; not found in CSA&quot;;
		if (foundProp != null)
			props.push(foundProp);
	}
	return props;
}

function evaluateValues(csaProperties, isChecked) {
	var newObj = {}
	for (var i = 0; i &lt; csaProperties.length; i++) {
		currentProp = csaProperties[i];
		/* add the Prefix to the Global property Name */
		name = propPrefix + currentProp.name;
        //println(name);
        
		/* if the values array is empty set blank string as the property */
		value = (currentProp.values.length === 1) ? currentProp.values[0].value
				: &quot;&quot;;

		/*
		 * if there is more than one value then its a list so merge it into
		 * string list using ,
		 */
		value = (currentProp.values.length &gt; 1) ? currentProp.values.map(
				function(elem) {
					return elem.value;
				}).join(&quot;,&quot;) : value;
		if ( isChecked == &quot;TRUE&quot; ) {
			if ( ! value )
				throw &quot;Value of property &quot; + currentProp.name + &quot; is undefined in CSA&quot;;
			if ( value == &quot;NULL&quot;)
				throw &quot;Value of property &quot; + currentProp.name + &quot; is NULL in CSA&quot;;
		}
		if (isGlobal != &quot;FALSE&quot;)
		// defect 1389
		//	scriptletContext.putGlobal(name, value);
			scriptletContext.putGlobal(name, getvar(&quot;value&quot;));


		/* Build new value object for primary result */
		
		// defect 1389
		// newObj[name] = value;
		newObj[name] = getvar(&quot;value&quot;);
		
	}
	return newObj;
}

/* if prefix exist add a dot to it else set it as empty string */
propPrefix = (prefix) ? prefix + &quot;.&quot; : &quot;&quot;;
/* if PropertyNames is undefined or null set it as empty string */
propFilter = typeof propertyNames == &apos;undefined&apos; ? &quot;&quot; : propertyNames || &quot;&quot;;
/* convert PropFilter to array for exact matching */
propFilter = propFilter.split(&quot;|&quot;);
/* if PropertyNames is null set it as empty string */

/* make sure the Global Param is uppercase */
isGlobal = global.toUpperCase();
isChecked = typeof checkKeyAndValue == &apos;undefined&apos; ? &quot;FALSE&quot; : checkKeyAndValue.toUpperCase();

var jsonObject, currentProp, newObj = {};
try {
	jsObject = JSON.parse(jsonObject);
	/*
	 * make sure that jsonObject is an Object and not an Array or any other
	 * valid JSON string
	 */
	var jsonObjectConstructor = new String(jsObject.constructor);
	if (jsonObjectConstructor.indexOf(&quot;Object&quot;) == -1) {
		throw &quot;jsonObject is not a valid JSON Object&quot;;
	}

	var props = filterProperties(jsObject.property, propFilter, isChecked);
	newObj = evaluateValues(props, isChecked);

	scriptletResult = JSON.stringify(newObj);
	scriptletResponse = &quot;success&quot;;
} catch (e) {
	scriptletResult = &quot;Result: &quot; + e;
}
</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="d517b08f-4486-481a-aa1a-d269e2a0508f">
      <annotation></annotation>
      <name>success</name>
      <isDefault>false</isDefault>
      <onFailure>false</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
    <opResponse id="430970de-3330-4edb-9a39-f3f9b41bc4dd">
      <annotation></annotation>
      <name>failure</name>
      <isDefault>true</isDefault>
      <onFailure>true</onFailure>
      <type>ERROR</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="fdbf1357-5225-4b23-ad81-c333f737af1e">
    <annotation></annotation>
    <name>Field 1</name>
    <fieldName>Field_1</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="2e793144-ed2b-4de2-a7ad-e802897cf5a0">
    <baseIcon>scriptlet.png</baseIcon>
    <basePath>System</basePath>
    <readOnly>false</readOnly>
    <layers/>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
</operation>