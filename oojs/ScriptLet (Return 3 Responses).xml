<?xml version="1.0" encoding="UTF-8"?>
<operation id="91e580c9-6faf-4bfc-9373-77e7b3a20ea9">
  <descriptionCdata><![CDATA[91e580c9-6faf-4bfc-9373-77e7b3a20ea9.description=<pre>\nThis operation running scriptlet from Inputs, It can be used to script flow.\nattention that do'not used Scriptlet tab, it need empty can be running script from Inputs script. \nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    Scriptlet - write on javascript.\n\nResults\:\n    returnResult - This is the primary output.\n    default this operation return errorCode and errorComponent that donot need add errorCode and errorComponent\n    if you want add errorCode and errorComponent used below scriptlet, please refer Outputs sample\n       errorCode  from returnResult scriptlet\:    scriptletResult \= scriptletContext.get("errorCode"); \n       errorComponent   from returnResult scriptlet\:   scriptletResult \= scriptletContext.get("errorComponent");\nResponses\:\n    success - The operation completed as stated in the description.\n    failure   -  The operation failure as stated in the description.\n    other -  The operation other as stated in the description.\nExamples of usage \:\n\n// This template shows how to access operation return data, inputs and context data \n// and how to set context data, responses and results. \n\n//convert to JSON object\njsObject \= JSON.parse({"var1"\:"value1"}); \nmyValue \= jsonOBJ["var1"];\n\n// To access an input simply refer to the input name from the Inputs panel.  For example\: \nmyData \= inputName; \n \n// To get value associated with the context key myContextKey\: \nmyContextData \= get("myContextKey"); \n \n// To get value associated with the context key myContextKey from the local context\: \nmyContextData \= let("myContextKey"); \n \n// To access the return code from a command line or script (note it is a string and must \n// be converted into an integer for numeric processing)\: \ncode \=getcode();\n \n// To access the output from the operation (for example stdout)\: \ndata \= getoutput() \n \n// To access the error string from the operation (for example stderr)\: \nerror \=geterror();\n \n// Other operations may have different result variables available.  To see the list for \n// a particular operation open the "Result from Field" dropdown on the Outputs tab \n \n// To set the response of the operation (must match one of the responses from the Responses tab)\: \ndid(true); // did("success")\ndid(false); // did("failure")\ndid("other");\n \n// To set the result of the operation \nprint( "Your Result Here"); \nprintln( "Your Result Here"); \n// Use the context to hold data for use by other steps.  It is also helpful to place information \n// into the context to examine variables when developing and debugging scriptlets. \n// For example to place the OutputString information into a context key called 'Output'\: \nputglobal("Output", data); \n \n// Note that the Key and Value are both strings.  For example to place 'code' into the context\: \nputglobal("Code", code.toString()); \n \n// You can also place data into the local context, which means it will only be available to \n// the current flow, but not to its parent flow or other subflows.  To do this\: \nput("LocalVariable","LocalValue"); \n\n// You can use error function to throw eror message.\nerror("throw error message");\n \n// sleep flow\nsleep(interval)\n\n</pre>
]]></descriptionCdata>
  <annotation>91e580c9-6faf-4bfc-9373-77e7b3a20ea9.description</annotation>
  <name>ScriptLet (Return 3 Responses)</name>
  <categories/>
  <inputs>
    <staticBinding id="f7712767-a9cd-4585-82ba-5250c226c142">
      <annotation></annotation>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Scriptlet</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <value>eval(String(scriptletContext.get(&quot;nucl.base.oojs&quot;))); /* #include this line in scriptlet to use OO ScriptLet Common Define functions for OOJS V1.0 @Daway*/
/*   Nucleus_automation_design_specification : OOJS templte @Daway*/
//Title: 3.18.8.1 Register Server for Backup :  
// Get and init variables from check input here
//=====================================
var inVar = getvar(&quot;InputVar&quot;); //get from inputs
var coVar1 = get(&quot;ContentVar&quot;); // get form context
var coVar2 = getdid(&quot;ContentedVar&quot;); //got from context
var myJSON = json(&apos;{&quot;one&quot;:&quot;1&quot;}&apos;); //get JSON object
var whichOne = myJSON[&quot;one&quot;]; //get JSON item to a vairable
//Your business logic implement here
//=====================================
if( isnull(&quot;inVar&quot;) ){     println(&quot; inVar is null&quot;);   myFunction();  }
else{       println(&quot; inVar is not null&quot;);    myFunction();    }
//Define Functions here
//=====================================
function myFunction(){
    println(&quot;JSON src:&quot;+json2str(myJSON)); printline(&quot;-&quot;,80);println(&quot;myJson[One] is:&quot;+str(whichOne));
}
//=====================================</value>
      <record>false</record>
    </staticBinding>
  </inputs>
  <scriptlet id="475cbe70-7fa4-417b-9ea6-ee635012bae0">
    <annotation></annotation>
    <name>Operation ScriptLet Return 3 Responses (91e580c9-6faf-4bfc-9373-77e7b3a20ea9)</name>
    <script>///
eval(String(scriptletContext.get(&quot;nucl.base.oojs&quot;))); /* #include this line in scriptlet to use OO ScriptLet Common Define functions for OOJS V1.0 @Daway*/
///
/*
(Nucleus_automation_design_specification_v40: 3.18.8.1) JavaScript Name: Run Scriptlets from Inputs @Daway
*/
/// Main() Begin: 
//=========================================================
/// exectue javascript content @Daway
try {
if(!isnull(&quot;Scriptlet&quot;)){eval(Scriptlet);}else{
//Begin :  your Scriptlet
//------------------------------------------------------------------------





//------------------------------------------------------------------------
//End   :  Your Scriptlet
}
// finalize oo javascirpt flow
} catch(e if e instanceof SyntaxError){
    showSyntaxError();
    did(false);
} catch (e){
    var errorMsg = str(e);
    showErrorInfo(errorMsg);
    did(false);
}finally { 
    println();
}
/// Main() End:   
//Define functions 
//=========================================================
//in Main catch
function showSyntaxError(){
    printline(&quot;*&quot;,80);
    println(&quot;It have error in your operation!!!&quot;);
    println(&quot;SyntaxError in the javascriptlet content is:&quot;);
    printline(&quot;-&quot;,80);
    println(getvar(&quot;Scriptlet&quot;));
    printline(&quot;=&quot;,80);
}
//in Main catch
function showErrorInfo(me){
    printline(&quot;*&quot;,80);
    println(&quot;It have error in your operation!!!&quot;);
    println(&quot;1) The error message was below:&quot;);
    printline(&quot;-&quot;,80);
    println(me);
    printline(&quot;=&quot;,80);
    // put context variable errorCode
    put(&quot;errorCode&quot;,&quot;999&quot;);
    put(&quot;errorComponent&quot;,me);
    if(!isnull(&quot;Scriptlet&quot;)){
        println(&quot;2) It used relation scriptlet source content was below:&quot;);
        printline(&quot;-&quot;,80);
        println(getvar(&quot;Scriptlet&quot;));
        printline(&quot;=&quot;,80);
    }
}
//in Main emptyInfo
function showEmptyInfo(){
    printline(&quot;*&quot;,80);
    println(&quot;It was not used Scriptlet on input inspector&quot;);
    println(&quot;javascriptlet content is empty!&quot;);
    printline(&quot;=&quot;,80);
}
// end of define functions
//=========================================================
// Begin  : your Define functions

// End    : your Define functions
//=========================================================</script>
    <type>RHINO</type>
    <scriptRef>
      <refId>7dddd6a1-4bb2-4c29-aaba-f2ba8e9df6ed</refId>
      <refName>Run Scriptlets from Inputs</refName>
    </scriptRef>
  </scriptlet>
  <possibleResponses>
    <opResponse id="bc1d8009-102f-4ded-9f55-eed581a59bc6">
      <annotation></annotation>
      <name>success</name>
      <isDefault>true</isDefault>
      <onFailure>false</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
    <opResponse id="55195ad6-5136-43c5-ba9f-fa71a15a1d22">
      <annotation></annotation>
      <name>failure</name>
      <isDefault>false</isDefault>
      <onFailure>false</onFailure>
      <type>ERROR</type>
      <matchRules/>
    </opResponse>
    <opResponse id="c967d1ab-5bcd-40c1-b6fd-eaaa89c54bd2">
      <annotation></annotation>
      <name>other</name>
      <isDefault>false</isDefault>
      <onFailure>false</onFailure>
      <type>DIAGNOSED</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions>
    <expression id="6e251c8b-4c68-46c5-b02a-9df1cf98fe19">
      <annotation></annotation>
      <name>errorCode</name>
      <fieldName>returnResult</fieldName>
      <sourceType>RAWRESULT</sourceType>
      <filters>
        <scriptletFilter id="254a45dc-d5df-46e6-9cbe-84fa86667f2a">
          <annotation></annotation>
          <name>Scriptlet</name>
          <scriptlet id="f0450e8d-5006-42c1-b235-f7000c4bcf3d">
            <annotation></annotation>
            <name>default</name>
            <script>scriptletResult = scriptletContext.get(&quot;errorCode&quot;);</script>
            <type>RHINO</type>
          </scriptlet>
        </scriptletFilter>
      </filters>
    </expression>
    <expression id="39d0db60-2e97-48f0-9a61-2f241781fb88">
      <annotation></annotation>
      <name>errorComponent</name>
      <fieldName>returnResult</fieldName>
      <sourceType>RAWRESULT</sourceType>
      <filters>
        <scriptletFilter id="25fd5631-0531-42e6-9d7d-b877c347a50b">
          <annotation></annotation>
          <name>Scriptlet</name>
          <scriptlet id="4be38af5-492a-405e-8604-54915c9672c1">
            <annotation></annotation>
            <name>default</name>
            <script>scriptletResult = scriptletContext.get(&quot;errorComponent&quot;);</script>
            <type>RHINO</type>
          </scriptlet>
        </scriptletFilter>
      </filters>
    </expression>
  </availableResultExpressions>
  <resultExpression id="89344fd1-fa4c-4c49-b6cc-e0ff78209a8f">
    <annotation></annotation>
    <name>returnResult</name>
    <fieldName>returnResult</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="ca5191bc-338b-4d4f-9bb9-d34dc2cf62e2">
    <baseIcon>text_code_javascript.png</baseIcon>
    <basePath>/Others/</basePath>
    <readOnly>false</readOnly>
    <layers>
      <iconSpec id="19c37c5a-432b-4020-b2a1-65f2d31c0232">
        <baseIcon>write2.png</baseIcon>
        <basePath>/Annotations/</basePath>
        <readOnly>false</readOnly>
        <layers/>
      </iconSpec>
    </layers>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
  <overrideGroupAlias>${overrideJRAS}</overrideGroupAlias>
</operation>